{"version":3,"file":"static/js/55.fa9e3dbb.chunk.js","mappings":"uQAEaA,EAAgBC,EAAAA,GAAAA,IAAH,+CAIbC,EAAYD,EAAAA,GAAAA,GAAH,oGASTE,EAAWF,EAAAA,GAAAA,GAAH,mIAQRG,EAAWH,EAAAA,GAAAA,GAAH,gEAKRI,EAAYJ,EAAAA,GAAAA,IAAH,2E,SCetB,EAtCa,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,qGACGC,EAAAA,EAAAA,IAAaC,SAAST,EAAS,KADlC,OACfU,EADe,OAErBP,EAAQO,GAFa,2CAAH,qDAKpBH,GACD,GAAE,CAACP,IAMJ,OACE,UAACN,EAAD,YACE,SAACE,EAAD,CAAWe,QANM,WACnBN,GAAaD,EACd,EAIG,SAAkC,SACjCA,IACC,SAACP,EAAD,UACGK,EAAKU,KAAI,SAACC,GAAD,OACR,UAACf,EAAD,YACE,SAACC,EAAD,CAAWe,IAAG,yCAAoCD,EAAME,cAAgBC,IAAKH,EAAMI,QACnF,uBAAIJ,EAAMI,SAFGJ,EAAMK,GADb,QAUnB,C","sources":["styles/CastStyles.js","components/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  text-align: center;\n`;\n\nexport const CastTitle = styled.h2`\n  color: #333;\n  cursor: Pointer;\n\n  &:hover {\n    color: #c66c6c\n  }\n`;\n\nexport const CastList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  margin: 10px;\n  text-align: center;\n`;\n\nexport const CastImage = styled.img`\n  width: 200px;\n  height: auto;\n  margin: 30px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieCast } from '../services/Movies.API';\nimport { CastContainer, CastTitle, CastList, CastItem, CastImage } from '../styles/CastStyles';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState([]);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      const movieCast = await getMovieCast(parseInt(movieId, 10));\n      setCast(movieCast);\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  const handleExpand = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <CastContainer>\n      <CastTitle onClick={handleExpand}>Cast</CastTitle>\n      {expanded && (\n        <CastList>\n          {cast.map((actor) => (\n            <CastItem key={actor.id}>\n              <CastImage src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} />\n              <p>{actor.name}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n    </CastContainer>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n\n\n\n\n\n"],"names":["CastContainer","styled","CastTitle","CastList","CastItem","CastImage","movieId","useState","cast","setCast","expanded","setExpanded","useEffect","fetchMovieCast","getMovieCast","parseInt","movieCast","onClick","map","actor","src","profile_path","alt","name","id"],"sourceRoot":""}